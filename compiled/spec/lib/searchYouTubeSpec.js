import searchYouTube from '../../src/lib/searchYouTube.js';
import YOUTUBE_API_KEY from '../../src/config/youtube.js';
import exampleVideoData from '../../src/data/exampleVideoData.js';

var getURLSearchParams = function (url) {
  return url.split('?')[1].split('&').reduce((map, params) => {
    var [key, value] = params.split('=');
    map[key] = value;
    return map;
  }, {});
};

var hasSameShape = function (objectOne, objectTwo) {
  if (Object.keys(objectOne).length !== Object.keys(objectTwo).length) {
    return false;
  }

  for (var key in objectOne) {
    if (!key in objectTwo) {
      return false;
    }

    if (typeof objectOne[key] !== typeof objectTwo[key]) {
      return false;
    }

    if (Object.prototype.toString.call(objectOne[key]) === '[object Object]') {
      return hasSameShape(objectOne[key], objectTwo[key]);
    }
  }

  return true;
};

describe('searchYouTube', function () {
  var requests, xhr;

  // Sinon temporarily hijacks all outgoing AJAX requests with `useFakeXMLHttpRequest`
  // letting us synchronously inspect any request made by `searchYouTube`

  beforeEach(function () {
    requests = [];
    xhr = sinon.useFakeXMLHttpRequest();
    xhr.onCreate = function (req) {
      requests.push(req);
    };
  });

  afterEach(function () {
    if (xhr.restore) {
      xhr.restore();
    }
  });

  it('should send a GET request', function () {
    searchYouTube({}, () => {});

    expect(requests[0].method).to.equal('GET');
  });

  it('should accept `key`, `query`, and `max` options and send them in GET request', function () {
    searchYouTube({ key: 'API_KEY', query: 'cats', max: 10 }, () => {});

    var params = getURLSearchParams(requests[0].url);
    expect(params.key).to.equal('API_KEY');
    expect(params.q).to.equal('cats');
    expect(params.maxResults).to.equal('10');
  });

  // Same shape means that the data should have the same keys, nested the same way as `exampleVideoData`,
  // though it will not necessarily have the same values.
  it('should GET videos with the same shape as `exampleVideoData`', function (done) {
    var options = {
      key: YOUTUBE_API_KEY,
      query: 'react',
      max: 5
    };

    // We want this test to make a real AJAX request
    xhr.restore();

    searchYouTube(options, data => {
      expect(hasSameShape(data, exampleVideoData)).to.be.true;
      done();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvbGliL3NlYXJjaFlvdVR1YmVTcGVjLmpzIl0sIm5hbWVzIjpbInNlYXJjaFlvdVR1YmUiLCJZT1VUVUJFX0FQSV9LRVkiLCJleGFtcGxlVmlkZW9EYXRhIiwiZ2V0VVJMU2VhcmNoUGFyYW1zIiwidXJsIiwic3BsaXQiLCJyZWR1Y2UiLCJtYXAiLCJwYXJhbXMiLCJrZXkiLCJ2YWx1ZSIsImhhc1NhbWVTaGFwZSIsIm9iamVjdE9uZSIsIm9iamVjdFR3byIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJkZXNjcmliZSIsInJlcXVlc3RzIiwieGhyIiwiYmVmb3JlRWFjaCIsInNpbm9uIiwidXNlRmFrZVhNTEh0dHBSZXF1ZXN0Iiwib25DcmVhdGUiLCJyZXEiLCJwdXNoIiwiYWZ0ZXJFYWNoIiwicmVzdG9yZSIsIml0IiwiZXhwZWN0IiwibWV0aG9kIiwidG8iLCJlcXVhbCIsInF1ZXJ5IiwibWF4IiwicSIsIm1heFJlc3VsdHMiLCJkb25lIiwib3B0aW9ucyIsImRhdGEiLCJiZSIsInRydWUiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLGFBQVAsTUFBMEIsZ0NBQTFCO0FBQ0EsT0FBT0MsZUFBUCxNQUE0Qiw2QkFBNUI7QUFDQSxPQUFPQyxnQkFBUCxNQUE2QixvQ0FBN0I7O0FBRUEsSUFBSUMscUJBQXFCLFVBQVNDLEdBQVQsRUFBYztBQUNyQyxTQUFPQSxJQUNKQyxLQURJLENBQ0UsR0FERixFQUNPLENBRFAsRUFFSkEsS0FGSSxDQUVFLEdBRkYsRUFHSkMsTUFISSxDQUdHLENBQUNDLEdBQUQsRUFBTUMsTUFBTixLQUFpQjtBQUN2QixRQUFJLENBQUNDLEdBQUQsRUFBTUMsS0FBTixJQUFlRixPQUFPSCxLQUFQLENBQWEsR0FBYixDQUFuQjtBQUNBRSxRQUFJRSxHQUFKLElBQVdDLEtBQVg7QUFDQSxXQUFPSCxHQUFQO0FBQ0QsR0FQSSxFQU9GLEVBUEUsQ0FBUDtBQVFELENBVEQ7O0FBV0EsSUFBSUksZUFBZSxVQUFTQyxTQUFULEVBQW9CQyxTQUFwQixFQUErQjtBQUNoRCxNQUFJQyxPQUFPQyxJQUFQLENBQVlILFNBQVosRUFBdUJJLE1BQXZCLEtBQWtDRixPQUFPQyxJQUFQLENBQVlGLFNBQVosRUFBdUJHLE1BQTdELEVBQXFFO0FBQ25FLFdBQU8sS0FBUDtBQUNEOztBQUVELE9BQUssSUFBSVAsR0FBVCxJQUFnQkcsU0FBaEIsRUFBMkI7QUFDekIsUUFBSSxDQUFDSCxHQUFELElBQVFJLFNBQVosRUFBdUI7QUFDckIsYUFBTyxLQUFQO0FBQ0Q7O0FBRUQsUUFBSSxPQUFPRCxVQUFVSCxHQUFWLENBQVAsS0FBMEIsT0FBT0ksVUFBVUosR0FBVixDQUFyQyxFQUFxRDtBQUNuRCxhQUFPLEtBQVA7QUFDRDs7QUFFRCxRQUFJSyxPQUFPRyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JQLFVBQVVILEdBQVYsQ0FBL0IsTUFBbUQsaUJBQXZELEVBQTBFO0FBQ3hFLGFBQU9FLGFBQWFDLFVBQVVILEdBQVYsQ0FBYixFQUE2QkksVUFBVUosR0FBVixDQUE3QixDQUFQO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPLElBQVA7QUFDRCxDQXBCRDs7QUFzQkFXLFNBQVMsZUFBVCxFQUEwQixZQUFXO0FBQ25DLE1BQUlDLFFBQUosRUFBY0MsR0FBZDs7QUFFQTtBQUNBOztBQUVBQyxhQUFXLFlBQVc7QUFDcEJGLGVBQVcsRUFBWDtBQUNBQyxVQUFNRSxNQUFNQyxxQkFBTixFQUFOO0FBQ0FILFFBQUlJLFFBQUosR0FBZSxVQUFTQyxHQUFULEVBQWM7QUFBRU4sZUFBU08sSUFBVCxDQUFjRCxHQUFkO0FBQXFCLEtBQXBEO0FBQ0QsR0FKRDs7QUFNQUUsWUFBVSxZQUFXO0FBQ25CLFFBQUlQLElBQUlRLE9BQVIsRUFBaUI7QUFDZlIsVUFBSVEsT0FBSjtBQUNEO0FBQ0YsR0FKRDs7QUFNQUMsS0FBRywyQkFBSCxFQUFnQyxZQUFXO0FBQ3pDL0Isa0JBQWMsRUFBZCxFQUFrQixNQUFNLENBQUUsQ0FBMUI7O0FBRUFnQyxXQUFPWCxTQUFTLENBQVQsRUFBWVksTUFBbkIsRUFBMkJDLEVBQTNCLENBQThCQyxLQUE5QixDQUFvQyxLQUFwQztBQUNELEdBSkQ7O0FBTUFKLEtBQUcsOEVBQUgsRUFBbUYsWUFBVztBQUM1Ri9CLGtCQUFjLEVBQUVTLEtBQUssU0FBUCxFQUFrQjJCLE9BQU8sTUFBekIsRUFBaUNDLEtBQUssRUFBdEMsRUFBZCxFQUEwRCxNQUFNLENBQUUsQ0FBbEU7O0FBRUEsUUFBSTdCLFNBQVNMLG1CQUFtQmtCLFNBQVMsQ0FBVCxFQUFZakIsR0FBL0IsQ0FBYjtBQUNBNEIsV0FBT3hCLE9BQU9DLEdBQWQsRUFBbUJ5QixFQUFuQixDQUFzQkMsS0FBdEIsQ0FBNEIsU0FBNUI7QUFDQUgsV0FBT3hCLE9BQU84QixDQUFkLEVBQWlCSixFQUFqQixDQUFvQkMsS0FBcEIsQ0FBMEIsTUFBMUI7QUFDQUgsV0FBT3hCLE9BQU8rQixVQUFkLEVBQTBCTCxFQUExQixDQUE2QkMsS0FBN0IsQ0FBbUMsSUFBbkM7QUFDRCxHQVBEOztBQVNBO0FBQ0E7QUFDQUosS0FBRyw2REFBSCxFQUFrRSxVQUFTUyxJQUFULEVBQWU7QUFDL0UsUUFBSUMsVUFBVTtBQUNaaEMsV0FBS1IsZUFETztBQUVabUMsYUFBTyxPQUZLO0FBR1pDLFdBQUs7QUFITyxLQUFkOztBQU1BO0FBQ0FmLFFBQUlRLE9BQUo7O0FBRUE5QixrQkFBY3lDLE9BQWQsRUFBd0JDLElBQUQsSUFBVTtBQUMvQlYsYUFBT3JCLGFBQWErQixJQUFiLEVBQW1CeEMsZ0JBQW5CLENBQVAsRUFBNkNnQyxFQUE3QyxDQUFnRFMsRUFBaEQsQ0FBbURDLElBQW5EO0FBQ0FKO0FBQ0QsS0FIRDtBQUlELEdBZEQ7QUFlRCxDQWxERCIsImZpbGUiOiJzZWFyY2hZb3VUdWJlU3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZWFyY2hZb3VUdWJlIGZyb20gJy4uLy4uL3NyYy9saWIvc2VhcmNoWW91VHViZS5qcyc7XG5pbXBvcnQgWU9VVFVCRV9BUElfS0VZIGZyb20gJy4uLy4uL3NyYy9jb25maWcveW91dHViZS5qcyc7XG5pbXBvcnQgZXhhbXBsZVZpZGVvRGF0YSBmcm9tICcuLi8uLi9zcmMvZGF0YS9leGFtcGxlVmlkZW9EYXRhLmpzJztcblxudmFyIGdldFVSTFNlYXJjaFBhcmFtcyA9IGZ1bmN0aW9uKHVybCkge1xuICByZXR1cm4gdXJsXG4gICAgLnNwbGl0KCc/JylbMV1cbiAgICAuc3BsaXQoJyYnKVxuICAgIC5yZWR1Y2UoKG1hcCwgcGFyYW1zKSA9PiB7XG4gICAgICB2YXIgW2tleSwgdmFsdWVdID0gcGFyYW1zLnNwbGl0KCc9Jyk7XG4gICAgICBtYXBba2V5XSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9LCB7fSk7XG59O1xuXG52YXIgaGFzU2FtZVNoYXBlID0gZnVuY3Rpb24ob2JqZWN0T25lLCBvYmplY3RUd28pIHtcbiAgaWYgKE9iamVjdC5rZXlzKG9iamVjdE9uZSkubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhvYmplY3RUd28pLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBvYmplY3RPbmUpIHtcbiAgICBpZiAoIWtleSBpbiBvYmplY3RUd28pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iamVjdE9uZVtrZXldICE9PSB0eXBlb2Ygb2JqZWN0VHdvW2tleV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdE9uZVtrZXldKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgIHJldHVybiBoYXNTYW1lU2hhcGUob2JqZWN0T25lW2tleV0sIG9iamVjdFR3b1trZXldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmRlc2NyaWJlKCdzZWFyY2hZb3VUdWJlJywgZnVuY3Rpb24oKSB7XG4gIHZhciByZXF1ZXN0cywgeGhyO1xuXG4gIC8vIFNpbm9uIHRlbXBvcmFyaWx5IGhpamFja3MgYWxsIG91dGdvaW5nIEFKQVggcmVxdWVzdHMgd2l0aCBgdXNlRmFrZVhNTEh0dHBSZXF1ZXN0YFxuICAvLyBsZXR0aW5nIHVzIHN5bmNocm9ub3VzbHkgaW5zcGVjdCBhbnkgcmVxdWVzdCBtYWRlIGJ5IGBzZWFyY2hZb3VUdWJlYFxuXG4gIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgcmVxdWVzdHMgPSBbXTtcbiAgICB4aHIgPSBzaW5vbi51c2VGYWtlWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHIub25DcmVhdGUgPSBmdW5jdGlvbihyZXEpIHsgcmVxdWVzdHMucHVzaChyZXEpOyB9O1xuICB9KTtcblxuICBhZnRlckVhY2goZnVuY3Rpb24oKSB7XG4gICAgaWYgKHhoci5yZXN0b3JlKSB7XG4gICAgICB4aHIucmVzdG9yZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBzZW5kIGEgR0VUIHJlcXVlc3QnLCBmdW5jdGlvbigpIHtcbiAgICBzZWFyY2hZb3VUdWJlKHt9LCAoKSA9PiB7fSk7XG5cbiAgICBleHBlY3QocmVxdWVzdHNbMF0ubWV0aG9kKS50by5lcXVhbCgnR0VUJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYWNjZXB0IGBrZXlgLCBgcXVlcnlgLCBhbmQgYG1heGAgb3B0aW9ucyBhbmQgc2VuZCB0aGVtIGluIEdFVCByZXF1ZXN0JywgZnVuY3Rpb24oKSB7XG4gICAgc2VhcmNoWW91VHViZSh7IGtleTogJ0FQSV9LRVknLCBxdWVyeTogJ2NhdHMnLCBtYXg6IDEwIH0sICgpID0+IHt9KTtcblxuICAgIHZhciBwYXJhbXMgPSBnZXRVUkxTZWFyY2hQYXJhbXMocmVxdWVzdHNbMF0udXJsKTtcbiAgICBleHBlY3QocGFyYW1zLmtleSkudG8uZXF1YWwoJ0FQSV9LRVknKTtcbiAgICBleHBlY3QocGFyYW1zLnEpLnRvLmVxdWFsKCdjYXRzJyk7XG4gICAgZXhwZWN0KHBhcmFtcy5tYXhSZXN1bHRzKS50by5lcXVhbCgnMTAnKTtcbiAgfSk7XG5cbiAgLy8gU2FtZSBzaGFwZSBtZWFucyB0aGF0IHRoZSBkYXRhIHNob3VsZCBoYXZlIHRoZSBzYW1lIGtleXMsIG5lc3RlZCB0aGUgc2FtZSB3YXkgYXMgYGV4YW1wbGVWaWRlb0RhdGFgLFxuICAvLyB0aG91Z2ggaXQgd2lsbCBub3QgbmVjZXNzYXJpbHkgaGF2ZSB0aGUgc2FtZSB2YWx1ZXMuXG4gIGl0KCdzaG91bGQgR0VUIHZpZGVvcyB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBleGFtcGxlVmlkZW9EYXRhYCcsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIGtleTogWU9VVFVCRV9BUElfS0VZLFxuICAgICAgcXVlcnk6ICdyZWFjdCcsXG4gICAgICBtYXg6IDVcbiAgICB9O1xuXG4gICAgLy8gV2Ugd2FudCB0aGlzIHRlc3QgdG8gbWFrZSBhIHJlYWwgQUpBWCByZXF1ZXN0XG4gICAgeGhyLnJlc3RvcmUoKTtcblxuICAgIHNlYXJjaFlvdVR1YmUob3B0aW9ucywgKGRhdGEpID0+IHtcbiAgICAgIGV4cGVjdChoYXNTYW1lU2hhcGUoZGF0YSwgZXhhbXBsZVZpZGVvRGF0YSkpLnRvLmJlLnRydWU7XG4gICAgICBkb25lKCk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il19
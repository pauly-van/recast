import App from '../../src/components/App.js';

describe('Search', function () {
  var {
    Simulate,
    renderIntoDocument,
    findRenderedDOMComponentWithClass,
    scryRenderedDOMComponentsWithClass
  } = React.addons.TestUtils;

  var app, searchYouTubeStub;

  describe('when rendering live data from YouTube', function () {
    beforeEach(function () {
      searchYouTubeStub = sinon.stub();
      searchYouTubeStub.onCall(0).yields(window.fakeVideoData);
      searchYouTubeStub.onCall(1).yields(window.moreFakeVideoData);

      app = renderIntoDocument(React.createElement(App, { searchYouTube: searchYouTubeStub }));
    });

    it('should load live data when app is initialized', function () {
      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
      videoEntryTitleElements.forEach((videoEntryTitle, i) => {
        expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title);
      });
    });

    it('should update the video list when typing into the input box', function () {
      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
      videoEntryTitleElements.forEach((videoEntryTitle, i) => {
        expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title);
      });

      var searchInputElement = findRenderedDOMComponentWithClass(app, 'form-control');
      Simulate.change(searchInputElement, { target: { value: 'React tutorial' } });

      var newVideoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
      newVideoEntryTitleElements.forEach((videoEntryTitle, i) => {
        expect(videoEntryTitle.innerHTML).to.equal(moreFakeVideoData[i].snippet.title);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9TZWFyY2hTcGVjLmpzeCJdLCJuYW1lcyI6WyJBcHAiLCJkZXNjcmliZSIsIlNpbXVsYXRlIiwicmVuZGVySW50b0RvY3VtZW50IiwiZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzIiwic2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyIsIlJlYWN0IiwiYWRkb25zIiwiVGVzdFV0aWxzIiwiYXBwIiwic2VhcmNoWW91VHViZVN0dWIiLCJiZWZvcmVFYWNoIiwic2lub24iLCJzdHViIiwib25DYWxsIiwieWllbGRzIiwid2luZG93IiwiZmFrZVZpZGVvRGF0YSIsIm1vcmVGYWtlVmlkZW9EYXRhIiwiaXQiLCJ2aWRlb0VudHJ5VGl0bGVFbGVtZW50cyIsImZvckVhY2giLCJ2aWRlb0VudHJ5VGl0bGUiLCJpIiwiZXhwZWN0IiwiaW5uZXJIVE1MIiwidG8iLCJlcXVhbCIsInNuaXBwZXQiLCJ0aXRsZSIsInNlYXJjaElucHV0RWxlbWVudCIsImNoYW5nZSIsInRhcmdldCIsInZhbHVlIiwibmV3VmlkZW9FbnRyeVRpdGxlRWxlbWVudHMiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEdBQVAsTUFBZ0IsNkJBQWhCOztBQUVBQyxTQUFVLFFBQVYsRUFBb0IsWUFBVztBQUM3QixNQUFJO0FBQ0ZDLFlBREU7QUFFRkMsc0JBRkU7QUFHRkMscUNBSEU7QUFJRkM7QUFKRSxNQUtBQyxNQUFNQyxNQUFOLENBQWFDLFNBTGpCOztBQU9BLE1BQUlDLEdBQUosRUFBU0MsaUJBQVQ7O0FBRUZULFdBQVMsdUNBQVQsRUFBa0QsWUFBVztBQUN6RFUsZUFBVyxZQUFXO0FBQ3BCRCwwQkFBb0JFLE1BQU1DLElBQU4sRUFBcEI7QUFDQUgsd0JBQWtCSSxNQUFsQixDQUF5QixDQUF6QixFQUE0QkMsTUFBNUIsQ0FBbUNDLE9BQU9DLGFBQTFDO0FBQ0FQLHdCQUFrQkksTUFBbEIsQ0FBeUIsQ0FBekIsRUFBNEJDLE1BQTVCLENBQW1DQyxPQUFPRSxpQkFBMUM7O0FBRUFULFlBQU1OLG1CQUNKLG9CQUFDLEdBQUQsSUFBSyxlQUFlTyxpQkFBcEIsR0FESSxDQUFOO0FBR0QsS0FSRDs7QUFVQVMsT0FBRywrQ0FBSCxFQUFvRCxZQUFXO0FBQzdELFVBQUlDLDBCQUEwQmYsbUNBQW1DSSxHQUFuQyxFQUF3Qyx3QkFBeEMsQ0FBOUI7QUFDQVcsOEJBQXdCQyxPQUF4QixDQUFnQyxDQUFDQyxlQUFELEVBQWtCQyxDQUFsQixLQUF3QjtBQUN0REMsZUFBT0YsZ0JBQWdCRyxTQUF2QixFQUFrQ0MsRUFBbEMsQ0FBcUNDLEtBQXJDLENBQTJDVixjQUFjTSxDQUFkLEVBQWlCSyxPQUFqQixDQUF5QkMsS0FBcEU7QUFDRCxPQUZEO0FBR0QsS0FMRDs7QUFPQVYsT0FBRyw2REFBSCxFQUFrRSxZQUFXO0FBQzNFLFVBQUlDLDBCQUEwQmYsbUNBQW1DSSxHQUFuQyxFQUF3Qyx3QkFBeEMsQ0FBOUI7QUFDQVcsOEJBQXdCQyxPQUF4QixDQUFnQyxDQUFDQyxlQUFELEVBQWtCQyxDQUFsQixLQUF3QjtBQUN0REMsZUFBT0YsZ0JBQWdCRyxTQUF2QixFQUFrQ0MsRUFBbEMsQ0FBcUNDLEtBQXJDLENBQTJDVixjQUFjTSxDQUFkLEVBQWlCSyxPQUFqQixDQUF5QkMsS0FBcEU7QUFDRCxPQUZEOztBQUlBLFVBQUlDLHFCQUFxQjFCLGtDQUFrQ0ssR0FBbEMsRUFBdUMsY0FBdkMsQ0FBekI7QUFDQVAsZUFBUzZCLE1BQVQsQ0FBZ0JELGtCQUFoQixFQUFvQyxFQUFDRSxRQUFRLEVBQUNDLE9BQU8sZ0JBQVIsRUFBVCxFQUFwQzs7QUFFQSxVQUFJQyw2QkFBNkI3QixtQ0FBbUNJLEdBQW5DLEVBQXdDLHdCQUF4QyxDQUFqQztBQUNBeUIsaUNBQTJCYixPQUEzQixDQUFtQyxDQUFDQyxlQUFELEVBQWtCQyxDQUFsQixLQUF3QjtBQUN6REMsZUFBT0YsZ0JBQWdCRyxTQUF2QixFQUFrQ0MsRUFBbEMsQ0FBcUNDLEtBQXJDLENBQTJDVCxrQkFBa0JLLENBQWxCLEVBQXFCSyxPQUFyQixDQUE2QkMsS0FBeEU7QUFDRCxPQUZEO0FBR0QsS0FiRDtBQWNELEdBaENIO0FBaUNDLENBM0NEIiwiZmlsZSI6IlNlYXJjaFNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXBwIGZyb20gJy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC5qcyc7XG5cbmRlc2NyaWJlICgnU2VhcmNoJywgZnVuY3Rpb24oKSB7XG4gIHZhciB7XG4gICAgU2ltdWxhdGUsXG4gICAgcmVuZGVySW50b0RvY3VtZW50LFxuICAgIGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyxcbiAgICBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzXG4gIH0gPSBSZWFjdC5hZGRvbnMuVGVzdFV0aWxzO1xuXG4gIHZhciBhcHAsIHNlYXJjaFlvdVR1YmVTdHViO1xuICBcbmRlc2NyaWJlKCd3aGVuIHJlbmRlcmluZyBsaXZlIGRhdGEgZnJvbSBZb3VUdWJlJywgZnVuY3Rpb24oKSB7XG4gICAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHNlYXJjaFlvdVR1YmVTdHViID0gc2lub24uc3R1YigpO1xuICAgICAgc2VhcmNoWW91VHViZVN0dWIub25DYWxsKDApLnlpZWxkcyh3aW5kb3cuZmFrZVZpZGVvRGF0YSk7XG4gICAgICBzZWFyY2hZb3VUdWJlU3R1Yi5vbkNhbGwoMSkueWllbGRzKHdpbmRvdy5tb3JlRmFrZVZpZGVvRGF0YSk7XG5cbiAgICAgIGFwcCA9IHJlbmRlckludG9Eb2N1bWVudChcbiAgICAgICAgPEFwcCBzZWFyY2hZb3VUdWJlPXtzZWFyY2hZb3VUdWJlU3R1Yn0gLz5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGxvYWQgbGl2ZSBkYXRhIHdoZW4gYXBwIGlzIGluaXRpYWxpemVkJywgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmlkZW9FbnRyeVRpdGxlRWxlbWVudHMgPSBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzKGFwcCwgJ3ZpZGVvLWxpc3QtZW50cnktdGl0bGUnKTtcbiAgICAgIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzLmZvckVhY2goKHZpZGVvRW50cnlUaXRsZSwgaSkgPT4ge1xuICAgICAgICBleHBlY3QodmlkZW9FbnRyeVRpdGxlLmlubmVySFRNTCkudG8uZXF1YWwoZmFrZVZpZGVvRGF0YVtpXS5zbmlwcGV0LnRpdGxlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCdzaG91bGQgdXBkYXRlIHRoZSB2aWRlbyBsaXN0IHdoZW4gdHlwaW5nIGludG8gdGhlIGlucHV0IGJveCcsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzID0gc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyhhcHAsICd2aWRlby1saXN0LWVudHJ5LXRpdGxlJyk7XG4gICAgICB2aWRlb0VudHJ5VGl0bGVFbGVtZW50cy5mb3JFYWNoKCh2aWRlb0VudHJ5VGl0bGUsIGkpID0+IHtcbiAgICAgICAgZXhwZWN0KHZpZGVvRW50cnlUaXRsZS5pbm5lckhUTUwpLnRvLmVxdWFsKGZha2VWaWRlb0RhdGFbaV0uc25pcHBldC50aXRsZSk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIHNlYXJjaElucHV0RWxlbWVudCA9IGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyhhcHAsICdmb3JtLWNvbnRyb2wnKTtcbiAgICAgIFNpbXVsYXRlLmNoYW5nZShzZWFyY2hJbnB1dEVsZW1lbnQsIHt0YXJnZXQ6IHt2YWx1ZTogJ1JlYWN0IHR1dG9yaWFsJ319KTtcblxuICAgICAgdmFyIG5ld1ZpZGVvRW50cnlUaXRsZUVsZW1lbnRzID0gc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyhhcHAsICd2aWRlby1saXN0LWVudHJ5LXRpdGxlJyk7XG4gICAgICBuZXdWaWRlb0VudHJ5VGl0bGVFbGVtZW50cy5mb3JFYWNoKCh2aWRlb0VudHJ5VGl0bGUsIGkpID0+IHtcbiAgICAgICAgZXhwZWN0KHZpZGVvRW50cnlUaXRsZS5pbm5lckhUTUwpLnRvLmVxdWFsKG1vcmVGYWtlVmlkZW9EYXRhW2ldLnNuaXBwZXQudGl0bGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=
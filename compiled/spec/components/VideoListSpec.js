import VideoList from '../../src/components/VideoList.js';
import VideoListEntry from '../../src/components/VideoListEntry.js';

describe('VideoList', function () {
  var { createRenderer } = React.addons.TestUtils;

  // When testing a React component that renders other nested components,
  // it's a common practice to "shallow render" the component, or render
  // only a single level deep. This isolates the component from it's children
  // See more: https://facebook.github.io/react/docs/test-utils.html#shallow-rendering

  it('should be a stateless functional component', function () {
    expect(React.Component.isPrototypeOf(VideoList)).to.be.false;
  });

  it('should render one `VideoListEntry` when given one video', function () {
    var shallowRenderer = createRenderer();

    var oneFakeVideo = window.fakeVideoData.slice(-1);
    shallowRenderer.render(React.createElement(VideoList, { videos: oneFakeVideo }));

    var videoList = shallowRenderer.getRenderOutput();
    expect(videoList.props.children).to.have.length(1);
    videoList.props.children.forEach(child => expect(child.type).to.equal(VideoListEntry));
  });

  it('should render three `VideoListEntry` when given three videos', function () {
    var shallowRenderer = createRenderer();

    var threeFakeVideos = window.fakeVideoData.slice(-3);
    shallowRenderer.render(React.createElement(VideoList, { videos: threeFakeVideos }));

    var videoList = shallowRenderer.getRenderOutput();
    expect(videoList.props.children).to.have.length(3);
    videoList.props.children.forEach(child => expect(child.type).to.equal(VideoListEntry));
  });

  it('should render five `VideoListEntry` when given five videos', function () {
    var shallowRenderer = createRenderer();

    var fiveFakeVideos = window.fakeVideoData.slice(-5);
    shallowRenderer.render(React.createElement(VideoList, { videos: fiveFakeVideos }));

    var videoList = shallowRenderer.getRenderOutput();
    expect(videoList.props.children).to.have.length(5);
    videoList.props.children.forEach(child => expect(child.type).to.equal(VideoListEntry));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9WaWRlb0xpc3RTcGVjLmpzeCJdLCJuYW1lcyI6WyJWaWRlb0xpc3QiLCJWaWRlb0xpc3RFbnRyeSIsImRlc2NyaWJlIiwiY3JlYXRlUmVuZGVyZXIiLCJSZWFjdCIsImFkZG9ucyIsIlRlc3RVdGlscyIsIml0IiwiZXhwZWN0IiwiQ29tcG9uZW50IiwiaXNQcm90b3R5cGVPZiIsInRvIiwiYmUiLCJmYWxzZSIsInNoYWxsb3dSZW5kZXJlciIsIm9uZUZha2VWaWRlbyIsIndpbmRvdyIsImZha2VWaWRlb0RhdGEiLCJzbGljZSIsInJlbmRlciIsInZpZGVvTGlzdCIsImdldFJlbmRlck91dHB1dCIsInByb3BzIiwiY2hpbGRyZW4iLCJoYXZlIiwibGVuZ3RoIiwiZm9yRWFjaCIsImNoaWxkIiwidHlwZSIsImVxdWFsIiwidGhyZWVGYWtlVmlkZW9zIiwiZml2ZUZha2VWaWRlb3MiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFNBQVAsTUFBc0IsbUNBQXRCO0FBQ0EsT0FBT0MsY0FBUCxNQUEyQix3Q0FBM0I7O0FBRUFDLFNBQVMsV0FBVCxFQUFzQixZQUFXO0FBQy9CLE1BQUksRUFBRUMsY0FBRixLQUFxQkMsTUFBTUMsTUFBTixDQUFhQyxTQUF0Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQUMsS0FBRyw0Q0FBSCxFQUFpRCxZQUFXO0FBQzFEQyxXQUFPSixNQUFNSyxTQUFOLENBQWdCQyxhQUFoQixDQUE4QlYsU0FBOUIsQ0FBUCxFQUFpRFcsRUFBakQsQ0FBb0RDLEVBQXBELENBQXVEQyxLQUF2RDtBQUNELEdBRkQ7O0FBSUFOLEtBQUcseURBQUgsRUFBOEQsWUFBVztBQUN2RSxRQUFJTyxrQkFBa0JYLGdCQUF0Qjs7QUFFQSxRQUFJWSxlQUFlQyxPQUFPQyxhQUFQLENBQXFCQyxLQUFyQixDQUEyQixDQUFDLENBQTVCLENBQW5CO0FBQ0FKLG9CQUFnQkssTUFBaEIsQ0FDRSxvQkFBQyxTQUFELElBQVcsUUFBUUosWUFBbkIsR0FERjs7QUFJQSxRQUFJSyxZQUFZTixnQkFBZ0JPLGVBQWhCLEVBQWhCO0FBQ0FiLFdBQU9ZLFVBQVVFLEtBQVYsQ0FBZ0JDLFFBQXZCLEVBQWlDWixFQUFqQyxDQUFvQ2EsSUFBcEMsQ0FBeUNDLE1BQXpDLENBQWdELENBQWhEO0FBQ0FMLGNBQVVFLEtBQVYsQ0FBZ0JDLFFBQWhCLENBQXlCRyxPQUF6QixDQUFpQ0MsU0FBU25CLE9BQU9tQixNQUFNQyxJQUFiLEVBQW1CakIsRUFBbkIsQ0FBc0JrQixLQUF0QixDQUE0QjVCLGNBQTVCLENBQTFDO0FBQ0QsR0FYRDs7QUFhQU0sS0FBRyw4REFBSCxFQUFtRSxZQUFXO0FBQzVFLFFBQUlPLGtCQUFrQlgsZ0JBQXRCOztBQUVBLFFBQUkyQixrQkFBa0JkLE9BQU9DLGFBQVAsQ0FBcUJDLEtBQXJCLENBQTJCLENBQUMsQ0FBNUIsQ0FBdEI7QUFDQUosb0JBQWdCSyxNQUFoQixDQUNFLG9CQUFDLFNBQUQsSUFBVyxRQUFRVyxlQUFuQixHQURGOztBQUlBLFFBQUlWLFlBQVlOLGdCQUFnQk8sZUFBaEIsRUFBaEI7QUFDQWIsV0FBT1ksVUFBVUUsS0FBVixDQUFnQkMsUUFBdkIsRUFBaUNaLEVBQWpDLENBQW9DYSxJQUFwQyxDQUF5Q0MsTUFBekMsQ0FBZ0QsQ0FBaEQ7QUFDQUwsY0FBVUUsS0FBVixDQUFnQkMsUUFBaEIsQ0FBeUJHLE9BQXpCLENBQWlDQyxTQUFTbkIsT0FBT21CLE1BQU1DLElBQWIsRUFBbUJqQixFQUFuQixDQUFzQmtCLEtBQXRCLENBQTRCNUIsY0FBNUIsQ0FBMUM7QUFDRCxHQVhEOztBQWFBTSxLQUFHLDREQUFILEVBQWlFLFlBQVc7QUFDMUUsUUFBSU8sa0JBQWtCWCxnQkFBdEI7O0FBRUEsUUFBSTRCLGlCQUFpQmYsT0FBT0MsYUFBUCxDQUFxQkMsS0FBckIsQ0FBMkIsQ0FBQyxDQUE1QixDQUFyQjtBQUNBSixvQkFBZ0JLLE1BQWhCLENBQ0Usb0JBQUMsU0FBRCxJQUFXLFFBQVFZLGNBQW5CLEdBREY7O0FBSUEsUUFBSVgsWUFBWU4sZ0JBQWdCTyxlQUFoQixFQUFoQjtBQUNBYixXQUFPWSxVQUFVRSxLQUFWLENBQWdCQyxRQUF2QixFQUFpQ1osRUFBakMsQ0FBb0NhLElBQXBDLENBQXlDQyxNQUF6QyxDQUFnRCxDQUFoRDtBQUNBTCxjQUFVRSxLQUFWLENBQWdCQyxRQUFoQixDQUF5QkcsT0FBekIsQ0FBaUNDLFNBQVNuQixPQUFPbUIsTUFBTUMsSUFBYixFQUFtQmpCLEVBQW5CLENBQXNCa0IsS0FBdEIsQ0FBNEI1QixjQUE1QixDQUExQztBQUNELEdBWEQ7QUFZRCxDQWxERCIsImZpbGUiOiJWaWRlb0xpc3RTcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZpZGVvTGlzdCBmcm9tICcuLi8uLi9zcmMvY29tcG9uZW50cy9WaWRlb0xpc3QuanMnO1xuaW1wb3J0IFZpZGVvTGlzdEVudHJ5IGZyb20gJy4uLy4uL3NyYy9jb21wb25lbnRzL1ZpZGVvTGlzdEVudHJ5LmpzJztcblxuZGVzY3JpYmUoJ1ZpZGVvTGlzdCcsIGZ1bmN0aW9uKCkge1xuICB2YXIgeyBjcmVhdGVSZW5kZXJlciB9ID0gUmVhY3QuYWRkb25zLlRlc3RVdGlscztcblxuICAvLyBXaGVuIHRlc3RpbmcgYSBSZWFjdCBjb21wb25lbnQgdGhhdCByZW5kZXJzIG90aGVyIG5lc3RlZCBjb21wb25lbnRzLFxuICAvLyBpdCdzIGEgY29tbW9uIHByYWN0aWNlIHRvIFwic2hhbGxvdyByZW5kZXJcIiB0aGUgY29tcG9uZW50LCBvciByZW5kZXJcbiAgLy8gb25seSBhIHNpbmdsZSBsZXZlbCBkZWVwLiBUaGlzIGlzb2xhdGVzIHRoZSBjb21wb25lbnQgZnJvbSBpdCdzIGNoaWxkcmVuXG4gIC8vIFNlZSBtb3JlOiBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3Rlc3QtdXRpbHMuaHRtbCNzaGFsbG93LXJlbmRlcmluZ1xuXG4gIGl0KCdzaG91bGQgYmUgYSBzdGF0ZWxlc3MgZnVuY3Rpb25hbCBjb21wb25lbnQnLCBmdW5jdGlvbigpIHtcbiAgICBleHBlY3QoUmVhY3QuQ29tcG9uZW50LmlzUHJvdG90eXBlT2YoVmlkZW9MaXN0KSkudG8uYmUuZmFsc2U7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIG9uZSBgVmlkZW9MaXN0RW50cnlgIHdoZW4gZ2l2ZW4gb25lIHZpZGVvJywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNoYWxsb3dSZW5kZXJlciA9IGNyZWF0ZVJlbmRlcmVyKCk7XG5cbiAgICB2YXIgb25lRmFrZVZpZGVvID0gd2luZG93LmZha2VWaWRlb0RhdGEuc2xpY2UoLTEpO1xuICAgIHNoYWxsb3dSZW5kZXJlci5yZW5kZXIoXG4gICAgICA8VmlkZW9MaXN0IHZpZGVvcz17b25lRmFrZVZpZGVvfSAvPlxuICAgICk7XG5cbiAgICB2YXIgdmlkZW9MaXN0ID0gc2hhbGxvd1JlbmRlcmVyLmdldFJlbmRlck91dHB1dCgpO1xuICAgIGV4cGVjdCh2aWRlb0xpc3QucHJvcHMuY2hpbGRyZW4pLnRvLmhhdmUubGVuZ3RoKDEpO1xuICAgIHZpZGVvTGlzdC5wcm9wcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IGV4cGVjdChjaGlsZC50eXBlKS50by5lcXVhbChWaWRlb0xpc3RFbnRyeSkpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciB0aHJlZSBgVmlkZW9MaXN0RW50cnlgIHdoZW4gZ2l2ZW4gdGhyZWUgdmlkZW9zJywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNoYWxsb3dSZW5kZXJlciA9IGNyZWF0ZVJlbmRlcmVyKCk7XG5cbiAgICB2YXIgdGhyZWVGYWtlVmlkZW9zID0gd2luZG93LmZha2VWaWRlb0RhdGEuc2xpY2UoLTMpO1xuICAgIHNoYWxsb3dSZW5kZXJlci5yZW5kZXIoXG4gICAgICA8VmlkZW9MaXN0IHZpZGVvcz17dGhyZWVGYWtlVmlkZW9zfSAvPlxuICAgICk7XG4gICAgXG4gICAgdmFyIHZpZGVvTGlzdCA9IHNoYWxsb3dSZW5kZXJlci5nZXRSZW5kZXJPdXRwdXQoKTtcbiAgICBleHBlY3QodmlkZW9MaXN0LnByb3BzLmNoaWxkcmVuKS50by5oYXZlLmxlbmd0aCgzKTtcbiAgICB2aWRlb0xpc3QucHJvcHMuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiBleHBlY3QoY2hpbGQudHlwZSkudG8uZXF1YWwoVmlkZW9MaXN0RW50cnkpKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgZml2ZSBgVmlkZW9MaXN0RW50cnlgIHdoZW4gZ2l2ZW4gZml2ZSB2aWRlb3MnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2hhbGxvd1JlbmRlcmVyID0gY3JlYXRlUmVuZGVyZXIoKTtcblxuICAgIHZhciBmaXZlRmFrZVZpZGVvcyA9IHdpbmRvdy5mYWtlVmlkZW9EYXRhLnNsaWNlKC01KTtcbiAgICBzaGFsbG93UmVuZGVyZXIucmVuZGVyKFxuICAgICAgPFZpZGVvTGlzdCB2aWRlb3M9e2ZpdmVGYWtlVmlkZW9zfSAvPlxuICAgICk7XG4gICAgXG4gICAgdmFyIHZpZGVvTGlzdCA9IHNoYWxsb3dSZW5kZXJlci5nZXRSZW5kZXJPdXRwdXQoKTtcbiAgICBleHBlY3QodmlkZW9MaXN0LnByb3BzLmNoaWxkcmVuKS50by5oYXZlLmxlbmd0aCg1KTtcbiAgICB2aWRlb0xpc3QucHJvcHMuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiBleHBlY3QoY2hpbGQudHlwZSkudG8uZXF1YWwoVmlkZW9MaXN0RW50cnkpKTtcbiAgfSk7XG59KTsiXX0=
import App from '../../src/components/App.js';

describe('App', function () {
  var {
    Simulate,
    renderIntoDocument,
    findRenderedDOMComponentWithClass,
    scryRenderedDOMComponentsWithClass
  } = React.addons.TestUtils;

  var app;

  beforeEach(function () {
    app = renderIntoDocument(React.createElement(App, { searchYouTube: () => {} }));
  });

  it('should be a stateful class component', function () {
    expect(React.Component.isPrototypeOf(App)).to.be.true;
  });

  it('should render a single VideoPlayer component', function () {
    var videoPlayer = findRenderedDOMComponentWithClass(app, 'video-player');
    expect(videoPlayer).to.exist;
  });

  it('should render a single VideoList component', function () {
    var videoList = findRenderedDOMComponentWithClass(app, 'video-list');
    expect(videoList).to.exist;
  });

  it('should update the video player when a video entry\'s title is clicked', function () {
    // This test will only works once `App` is refactored into a stateful class component
    // because `renderIntoDocument` does not work with stateless class components
    expect(React.Component.isPrototypeOf(App)).to.be.true;

    var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');

    videoEntryTitleElements.forEach(videoEntryTitle => {
      Simulate.click(videoEntryTitle);
      var player = findRenderedDOMComponentWithClass(app, 'video-player');
      var playerTitle = player.querySelector('.video-player-details h3');

      // This test assumes that if you can successfully update the video player's title,
      // you can also update the video and description
      expect(playerTitle.innerHTML).to.equal(videoEntryTitle.innerHTML);
    });
  });

  describe('when rendering live data from YouTube', function () {
    var searchYouTubeStub;

    beforeEach(function () {
      searchYouTubeStub = sinon.stub();
      searchYouTubeStub.yields(window.fakeVideoData);
      app = renderIntoDocument(React.createElement(App, { searchYouTube: searchYouTubeStub }));
    });

    it('should call `searchYouTube` when app is initialized', function () {
      expect(searchYouTubeStub.called).to.be.true;
    });

    it('should load live data when app is initialized', function () {
      expect(searchYouTubeStub.called).to.be.true;

      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');

      videoEntryTitleElements.forEach((videoEntryTitle, i) => expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9BcHBTcGVjLmpzeCJdLCJuYW1lcyI6WyJBcHAiLCJkZXNjcmliZSIsIlNpbXVsYXRlIiwicmVuZGVySW50b0RvY3VtZW50IiwiZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzIiwic2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyIsIlJlYWN0IiwiYWRkb25zIiwiVGVzdFV0aWxzIiwiYXBwIiwiYmVmb3JlRWFjaCIsIml0IiwiZXhwZWN0IiwiQ29tcG9uZW50IiwiaXNQcm90b3R5cGVPZiIsInRvIiwiYmUiLCJ0cnVlIiwidmlkZW9QbGF5ZXIiLCJleGlzdCIsInZpZGVvTGlzdCIsInZpZGVvRW50cnlUaXRsZUVsZW1lbnRzIiwiZm9yRWFjaCIsInZpZGVvRW50cnlUaXRsZSIsImNsaWNrIiwicGxheWVyIiwicGxheWVyVGl0bGUiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJIVE1MIiwiZXF1YWwiLCJzZWFyY2hZb3VUdWJlU3R1YiIsInNpbm9uIiwic3R1YiIsInlpZWxkcyIsIndpbmRvdyIsImZha2VWaWRlb0RhdGEiLCJjYWxsZWQiLCJpIiwic25pcHBldCIsInRpdGxlIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxHQUFQLE1BQWdCLDZCQUFoQjs7QUFFQUMsU0FBUyxLQUFULEVBQWdCLFlBQVc7QUFDekIsTUFBSTtBQUNGQyxZQURFO0FBRUZDLHNCQUZFO0FBR0ZDLHFDQUhFO0FBSUZDO0FBSkUsTUFLQUMsTUFBTUMsTUFBTixDQUFhQyxTQUxqQjs7QUFPQSxNQUFJQyxHQUFKOztBQUVBQyxhQUFXLFlBQVc7QUFDcEJELFVBQU1OLG1CQUNKLG9CQUFDLEdBQUQsSUFBSyxlQUFlLE1BQU0sQ0FBRSxDQUE1QixHQURJLENBQU47QUFHRCxHQUpEOztBQU1BUSxLQUFHLHNDQUFILEVBQTJDLFlBQVc7QUFDcERDLFdBQU9OLE1BQU1PLFNBQU4sQ0FBZ0JDLGFBQWhCLENBQThCZCxHQUE5QixDQUFQLEVBQTJDZSxFQUEzQyxDQUE4Q0MsRUFBOUMsQ0FBaURDLElBQWpEO0FBQ0QsR0FGRDs7QUFJQU4sS0FBRyw4Q0FBSCxFQUFtRCxZQUFXO0FBQzVELFFBQUlPLGNBQWNkLGtDQUFrQ0ssR0FBbEMsRUFBdUMsY0FBdkMsQ0FBbEI7QUFDQUcsV0FBT00sV0FBUCxFQUFvQkgsRUFBcEIsQ0FBdUJJLEtBQXZCO0FBQ0QsR0FIRDs7QUFLQVIsS0FBRyw0Q0FBSCxFQUFpRCxZQUFXO0FBQzFELFFBQUlTLFlBQVloQixrQ0FBa0NLLEdBQWxDLEVBQXVDLFlBQXZDLENBQWhCO0FBQ0FHLFdBQU9RLFNBQVAsRUFBa0JMLEVBQWxCLENBQXFCSSxLQUFyQjtBQUNELEdBSEQ7O0FBS0FSLEtBQUcsdUVBQUgsRUFBNEUsWUFBVztBQUNyRjtBQUNBO0FBQ0FDLFdBQU9OLE1BQU1PLFNBQU4sQ0FBZ0JDLGFBQWhCLENBQThCZCxHQUE5QixDQUFQLEVBQTJDZSxFQUEzQyxDQUE4Q0MsRUFBOUMsQ0FBaURDLElBQWpEOztBQUVBLFFBQUlJLDBCQUEwQmhCLG1DQUFtQ0ksR0FBbkMsRUFBd0Msd0JBQXhDLENBQTlCOztBQUVBWSw0QkFBd0JDLE9BQXhCLENBQWlDQyxlQUFELElBQXFCO0FBQ25EckIsZUFBU3NCLEtBQVQsQ0FBZUQsZUFBZjtBQUNBLFVBQUlFLFNBQVNyQixrQ0FBa0NLLEdBQWxDLEVBQXVDLGNBQXZDLENBQWI7QUFDQSxVQUFJaUIsY0FBY0QsT0FBT0UsYUFBUCxDQUFxQiwwQkFBckIsQ0FBbEI7O0FBRUE7QUFDQTtBQUNBZixhQUFPYyxZQUFZRSxTQUFuQixFQUE4QmIsRUFBOUIsQ0FBaUNjLEtBQWpDLENBQXVDTixnQkFBZ0JLLFNBQXZEO0FBQ0QsS0FSRDtBQVNELEdBaEJEOztBQWtCQTNCLFdBQVMsdUNBQVQsRUFBa0QsWUFBVztBQUMzRCxRQUFJNkIsaUJBQUo7O0FBRUFwQixlQUFXLFlBQVc7QUFDcEJvQiwwQkFBb0JDLE1BQU1DLElBQU4sRUFBcEI7QUFDQUYsd0JBQWtCRyxNQUFsQixDQUF5QkMsT0FBT0MsYUFBaEM7QUFDQTFCLFlBQU1OLG1CQUNKLG9CQUFDLEdBQUQsSUFBSyxlQUFlMkIsaUJBQXBCLEdBREksQ0FBTjtBQUdELEtBTkQ7O0FBUUFuQixPQUFHLHFEQUFILEVBQTBELFlBQVc7QUFDbkVDLGFBQU9rQixrQkFBa0JNLE1BQXpCLEVBQWlDckIsRUFBakMsQ0FBb0NDLEVBQXBDLENBQXVDQyxJQUF2QztBQUNELEtBRkQ7O0FBSUFOLE9BQUcsK0NBQUgsRUFBb0QsWUFBVztBQUM3REMsYUFBT2tCLGtCQUFrQk0sTUFBekIsRUFBaUNyQixFQUFqQyxDQUFvQ0MsRUFBcEMsQ0FBdUNDLElBQXZDOztBQUVBLFVBQUlJLDBCQUEwQmhCLG1DQUFtQ0ksR0FBbkMsRUFBd0Msd0JBQXhDLENBQTlCOztBQUVBWSw4QkFBd0JDLE9BQXhCLENBQWdDLENBQUNDLGVBQUQsRUFBa0JjLENBQWxCLEtBQzlCekIsT0FBT1csZ0JBQWdCSyxTQUF2QixFQUFrQ2IsRUFBbEMsQ0FBcUNjLEtBQXJDLENBQTJDTSxjQUFjRSxDQUFkLEVBQWlCQyxPQUFqQixDQUF5QkMsS0FBcEUsQ0FERjtBQUdELEtBUkQ7QUFVRCxHQXpCRDtBQTBCRCxDQTFFRCIsImZpbGUiOiJBcHBTcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFwcCBmcm9tICcuLi8uLi9zcmMvY29tcG9uZW50cy9BcHAuanMnO1xuXG5kZXNjcmliZSgnQXBwJywgZnVuY3Rpb24oKSB7XG4gIHZhciB7XG4gICAgU2ltdWxhdGUsXG4gICAgcmVuZGVySW50b0RvY3VtZW50LFxuICAgIGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyxcbiAgICBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzXG4gIH0gPSBSZWFjdC5hZGRvbnMuVGVzdFV0aWxzO1xuXG4gIHZhciBhcHA7XG5cbiAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICBhcHAgPSByZW5kZXJJbnRvRG9jdW1lbnQoXG4gICAgICA8QXBwIHNlYXJjaFlvdVR1YmU9eygpID0+IHt9fS8+XG4gICAgKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBiZSBhIHN0YXRlZnVsIGNsYXNzIGNvbXBvbmVudCcsIGZ1bmN0aW9uKCkge1xuICAgIGV4cGVjdChSZWFjdC5Db21wb25lbnQuaXNQcm90b3R5cGVPZihBcHApKS50by5iZS50cnVlO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBhIHNpbmdsZSBWaWRlb1BsYXllciBjb21wb25lbnQnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmlkZW9QbGF5ZXIgPSBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MoYXBwLCAndmlkZW8tcGxheWVyJyk7XG4gICAgZXhwZWN0KHZpZGVvUGxheWVyKS50by5leGlzdDtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgYSBzaW5nbGUgVmlkZW9MaXN0IGNvbXBvbmVudCcsIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWRlb0xpc3QgPSBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MoYXBwLCAndmlkZW8tbGlzdCcpO1xuICAgIGV4cGVjdCh2aWRlb0xpc3QpLnRvLmV4aXN0O1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHVwZGF0ZSB0aGUgdmlkZW8gcGxheWVyIHdoZW4gYSB2aWRlbyBlbnRyeVxcJ3MgdGl0bGUgaXMgY2xpY2tlZCcsIGZ1bmN0aW9uKCkge1xuICAgIC8vIFRoaXMgdGVzdCB3aWxsIG9ubHkgd29ya3Mgb25jZSBgQXBwYCBpcyByZWZhY3RvcmVkIGludG8gYSBzdGF0ZWZ1bCBjbGFzcyBjb21wb25lbnRcbiAgICAvLyBiZWNhdXNlIGByZW5kZXJJbnRvRG9jdW1lbnRgIGRvZXMgbm90IHdvcmsgd2l0aCBzdGF0ZWxlc3MgY2xhc3MgY29tcG9uZW50c1xuICAgIGV4cGVjdChSZWFjdC5Db21wb25lbnQuaXNQcm90b3R5cGVPZihBcHApKS50by5iZS50cnVlO1xuXG4gICAgdmFyIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzID0gc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyhhcHAsICd2aWRlby1saXN0LWVudHJ5LXRpdGxlJyk7XG5cbiAgICB2aWRlb0VudHJ5VGl0bGVFbGVtZW50cy5mb3JFYWNoKCh2aWRlb0VudHJ5VGl0bGUpID0+IHtcbiAgICAgIFNpbXVsYXRlLmNsaWNrKHZpZGVvRW50cnlUaXRsZSk7XG4gICAgICB2YXIgcGxheWVyID0gZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzKGFwcCwgJ3ZpZGVvLXBsYXllcicpO1xuICAgICAgdmFyIHBsYXllclRpdGxlID0gcGxheWVyLnF1ZXJ5U2VsZWN0b3IoJy52aWRlby1wbGF5ZXItZGV0YWlscyBoMycpO1xuXG4gICAgICAvLyBUaGlzIHRlc3QgYXNzdW1lcyB0aGF0IGlmIHlvdSBjYW4gc3VjY2Vzc2Z1bGx5IHVwZGF0ZSB0aGUgdmlkZW8gcGxheWVyJ3MgdGl0bGUsXG4gICAgICAvLyB5b3UgY2FuIGFsc28gdXBkYXRlIHRoZSB2aWRlbyBhbmQgZGVzY3JpcHRpb25cbiAgICAgIGV4cGVjdChwbGF5ZXJUaXRsZS5pbm5lckhUTUwpLnRvLmVxdWFsKHZpZGVvRW50cnlUaXRsZS5pbm5lckhUTUwpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnd2hlbiByZW5kZXJpbmcgbGl2ZSBkYXRhIGZyb20gWW91VHViZScsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWFyY2hZb3VUdWJlU3R1YjtcblxuICAgIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgICBzZWFyY2hZb3VUdWJlU3R1YiA9IHNpbm9uLnN0dWIoKTtcbiAgICAgIHNlYXJjaFlvdVR1YmVTdHViLnlpZWxkcyh3aW5kb3cuZmFrZVZpZGVvRGF0YSk7XG4gICAgICBhcHAgPSByZW5kZXJJbnRvRG9jdW1lbnQoXG4gICAgICAgIDxBcHAgc2VhcmNoWW91VHViZT17c2VhcmNoWW91VHViZVN0dWJ9IC8+XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjYWxsIGBzZWFyY2hZb3VUdWJlYCB3aGVuIGFwcCBpcyBpbml0aWFsaXplZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgZXhwZWN0KHNlYXJjaFlvdVR1YmVTdHViLmNhbGxlZCkudG8uYmUudHJ1ZTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbG9hZCBsaXZlIGRhdGEgd2hlbiBhcHAgaXMgaW5pdGlhbGl6ZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgIGV4cGVjdChzZWFyY2hZb3VUdWJlU3R1Yi5jYWxsZWQpLnRvLmJlLnRydWU7XG5cbiAgICAgIHZhciB2aWRlb0VudHJ5VGl0bGVFbGVtZW50cyA9IHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3MoYXBwLCAndmlkZW8tbGlzdC1lbnRyeS10aXRsZScpO1xuXG4gICAgICB2aWRlb0VudHJ5VGl0bGVFbGVtZW50cy5mb3JFYWNoKCh2aWRlb0VudHJ5VGl0bGUsIGkpID0+XG4gICAgICAgIGV4cGVjdCh2aWRlb0VudHJ5VGl0bGUuaW5uZXJIVE1MKS50by5lcXVhbChmYWtlVmlkZW9EYXRhW2ldLnNuaXBwZXQudGl0bGUpXG4gICAgICApO1xuICAgIH0pO1xuXG4gIH0pO1xufSk7XG4iXX0=
import App from '../../src/components/App.js';

describe('App', function () {
  var {
    Simulate,
    renderIntoDocument,
    findRenderedDOMComponentWithClass,
    scryRenderedDOMComponentsWithClass
  } = React.addons.TestUtils;

  var app;

  beforeEach(function () {
    app = renderIntoDocument(React.createElement(App, { searchYouTube: () => {} }));
  });

  it('should be a stateful class component', function () {
    expect(React.Component.isPrototypeOf(App)).to.be.true;
  });

  it('should render a single VideoPlayer component', function () {
    var videoPlayer = findRenderedDOMComponentWithClass(app, 'video-player');
    expect(videoPlayer).to.exist;
  });

  it('should render a single VideoList component', function () {
    var videoList = findRenderedDOMComponentWithClass(app, 'video-list');
    expect(videoList).to.exist;
  });

  it('should update the video player when a video entry\'s title is clicked', function () {
    // This test will only works once `App` is refactored into a stateful class component
    // because `renderIntoDocument` does not work with stateless class components
    expect(React.Component.isPrototypeOf(App)).to.be.true;

    var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');

    videoEntryTitleElements.forEach(videoEntryTitle => {
      Simulate.click(videoEntryTitle);
      var player = findRenderedDOMComponentWithClass(app, 'video-player');
      var playerTitle = player.querySelector('.video-player-details h3');

      // This test assumes that if you can successfully update the video player's title,
      // you can also update the video and description
      expect(playerTitle.innerHTML).to.equal(videoEntryTitle.innerHTML);
    });
  });

  xdescribe('when rendering live data from YouTube', function () {
    var searchYouTubeStub;

    beforeEach(function () {
      searchYouTubeStub = sinon.stub();
      searchYouTubeStub.yields(window.fakeVideoData);
      app = renderIntoDocument(React.createElement(App, { searchYouTube: searchYouTubeStub }));
    });

    it('should call `searchYouTube` when app is initialized', function () {
      expect(searchYouTubeStub.called).to.be.true;
    });

    it('should load live data when app is initialized', function () {
      expect(searchYouTubeStub.called).to.be.true;

      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');

      videoEntryTitleElements.forEach((videoEntryTitle, i) => expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9BcHBTcGVjLmpzeCJdLCJuYW1lcyI6WyJBcHAiLCJkZXNjcmliZSIsIlNpbXVsYXRlIiwicmVuZGVySW50b0RvY3VtZW50IiwiZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzIiwic2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyIsIlJlYWN0IiwiYWRkb25zIiwiVGVzdFV0aWxzIiwiYXBwIiwiYmVmb3JlRWFjaCIsIml0IiwiZXhwZWN0IiwiQ29tcG9uZW50IiwiaXNQcm90b3R5cGVPZiIsInRvIiwiYmUiLCJ0cnVlIiwidmlkZW9QbGF5ZXIiLCJleGlzdCIsInZpZGVvTGlzdCIsInZpZGVvRW50cnlUaXRsZUVsZW1lbnRzIiwiZm9yRWFjaCIsInZpZGVvRW50cnlUaXRsZSIsImNsaWNrIiwicGxheWVyIiwicGxheWVyVGl0bGUiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJIVE1MIiwiZXF1YWwiLCJ4ZGVzY3JpYmUiLCJzZWFyY2hZb3VUdWJlU3R1YiIsInNpbm9uIiwic3R1YiIsInlpZWxkcyIsIndpbmRvdyIsImZha2VWaWRlb0RhdGEiLCJjYWxsZWQiLCJpIiwic25pcHBldCIsInRpdGxlIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxHQUFQLE1BQWdCLDZCQUFoQjs7QUFFQUMsU0FBUyxLQUFULEVBQWdCLFlBQVc7QUFDekIsTUFBSTtBQUNGQyxZQURFO0FBRUZDLHNCQUZFO0FBR0ZDLHFDQUhFO0FBSUZDO0FBSkUsTUFLQUMsTUFBTUMsTUFBTixDQUFhQyxTQUxqQjs7QUFPQSxNQUFJQyxHQUFKOztBQUVBQyxhQUFXLFlBQVc7QUFDcEJELFVBQU1OLG1CQUNKLG9CQUFDLEdBQUQsSUFBSyxlQUFlLE1BQU0sQ0FBRSxDQUE1QixHQURJLENBQU47QUFHRCxHQUpEOztBQU1BUSxLQUFHLHNDQUFILEVBQTJDLFlBQVc7QUFDcERDLFdBQU9OLE1BQU1PLFNBQU4sQ0FBZ0JDLGFBQWhCLENBQThCZCxHQUE5QixDQUFQLEVBQTJDZSxFQUEzQyxDQUE4Q0MsRUFBOUMsQ0FBaURDLElBQWpEO0FBQ0QsR0FGRDs7QUFJQU4sS0FBRyw4Q0FBSCxFQUFtRCxZQUFXO0FBQzVELFFBQUlPLGNBQWNkLGtDQUFrQ0ssR0FBbEMsRUFBdUMsY0FBdkMsQ0FBbEI7QUFDQUcsV0FBT00sV0FBUCxFQUFvQkgsRUFBcEIsQ0FBdUJJLEtBQXZCO0FBQ0QsR0FIRDs7QUFLQVIsS0FBRyw0Q0FBSCxFQUFpRCxZQUFXO0FBQzFELFFBQUlTLFlBQVloQixrQ0FBa0NLLEdBQWxDLEVBQXVDLFlBQXZDLENBQWhCO0FBQ0FHLFdBQU9RLFNBQVAsRUFBa0JMLEVBQWxCLENBQXFCSSxLQUFyQjtBQUNELEdBSEQ7O0FBS0FSLEtBQUcsdUVBQUgsRUFBNEUsWUFBVztBQUNyRjtBQUNBO0FBQ0FDLFdBQU9OLE1BQU1PLFNBQU4sQ0FBZ0JDLGFBQWhCLENBQThCZCxHQUE5QixDQUFQLEVBQTJDZSxFQUEzQyxDQUE4Q0MsRUFBOUMsQ0FBaURDLElBQWpEOztBQUVBLFFBQUlJLDBCQUEwQmhCLG1DQUFtQ0ksR0FBbkMsRUFBd0Msd0JBQXhDLENBQTlCOztBQUVBWSw0QkFBd0JDLE9BQXhCLENBQWlDQyxlQUFELElBQXFCO0FBQ25EckIsZUFBU3NCLEtBQVQsQ0FBZUQsZUFBZjtBQUNBLFVBQUlFLFNBQVNyQixrQ0FBa0NLLEdBQWxDLEVBQXVDLGNBQXZDLENBQWI7QUFDQSxVQUFJaUIsY0FBY0QsT0FBT0UsYUFBUCxDQUFxQiwwQkFBckIsQ0FBbEI7O0FBRUE7QUFDQTtBQUNBZixhQUFPYyxZQUFZRSxTQUFuQixFQUE4QmIsRUFBOUIsQ0FBaUNjLEtBQWpDLENBQXVDTixnQkFBZ0JLLFNBQXZEO0FBQ0QsS0FSRDtBQVNELEdBaEJEOztBQWtCQUUsWUFBVSx1Q0FBVixFQUFtRCxZQUFXO0FBQzVELFFBQUlDLGlCQUFKOztBQUVBckIsZUFBVyxZQUFXO0FBQ3BCcUIsMEJBQW9CQyxNQUFNQyxJQUFOLEVBQXBCO0FBQ0FGLHdCQUFrQkcsTUFBbEIsQ0FBeUJDLE9BQU9DLGFBQWhDO0FBQ0EzQixZQUFNTixtQkFDSixvQkFBQyxHQUFELElBQUssZUFBZTRCLGlCQUFwQixHQURJLENBQU47QUFHRCxLQU5EOztBQVFBcEIsT0FBRyxxREFBSCxFQUEwRCxZQUFXO0FBQ25FQyxhQUFPbUIsa0JBQWtCTSxNQUF6QixFQUFpQ3RCLEVBQWpDLENBQW9DQyxFQUFwQyxDQUF1Q0MsSUFBdkM7QUFDRCxLQUZEOztBQUlBTixPQUFHLCtDQUFILEVBQW9ELFlBQVc7QUFDN0RDLGFBQU9tQixrQkFBa0JNLE1BQXpCLEVBQWlDdEIsRUFBakMsQ0FBb0NDLEVBQXBDLENBQXVDQyxJQUF2Qzs7QUFFQSxVQUFJSSwwQkFBMEJoQixtQ0FBbUNJLEdBQW5DLEVBQXdDLHdCQUF4QyxDQUE5Qjs7QUFFQVksOEJBQXdCQyxPQUF4QixDQUFnQyxDQUFDQyxlQUFELEVBQWtCZSxDQUFsQixLQUM5QjFCLE9BQU9XLGdCQUFnQkssU0FBdkIsRUFBa0NiLEVBQWxDLENBQXFDYyxLQUFyQyxDQUEyQ08sY0FBY0UsQ0FBZCxFQUFpQkMsT0FBakIsQ0FBeUJDLEtBQXBFLENBREY7QUFHRCxLQVJEO0FBVUQsR0F6QkQ7QUEwQkQsQ0ExRUQiLCJmaWxlIjoiQXBwU3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcHAgZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMvQXBwLmpzJztcblxuZGVzY3JpYmUoJ0FwcCcsIGZ1bmN0aW9uKCkge1xuICB2YXIge1xuICAgIFNpbXVsYXRlLFxuICAgIHJlbmRlckludG9Eb2N1bWVudCxcbiAgICBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MsXG4gICAgc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzc1xuICB9ID0gUmVhY3QuYWRkb25zLlRlc3RVdGlscztcblxuICB2YXIgYXBwO1xuXG4gIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgYXBwID0gcmVuZGVySW50b0RvY3VtZW50KFxuICAgICAgPEFwcCBzZWFyY2hZb3VUdWJlPXsoKSA9PiB7fX0vPlxuICAgICk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgYSBzdGF0ZWZ1bCBjbGFzcyBjb21wb25lbnQnLCBmdW5jdGlvbigpIHtcbiAgICBleHBlY3QoUmVhY3QuQ29tcG9uZW50LmlzUHJvdG90eXBlT2YoQXBwKSkudG8uYmUudHJ1ZTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgYSBzaW5nbGUgVmlkZW9QbGF5ZXIgY29tcG9uZW50JywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZpZGVvUGxheWVyID0gZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzKGFwcCwgJ3ZpZGVvLXBsYXllcicpO1xuICAgIGV4cGVjdCh2aWRlb1BsYXllcikudG8uZXhpc3Q7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIGEgc2luZ2xlIFZpZGVvTGlzdCBjb21wb25lbnQnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmlkZW9MaXN0ID0gZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzKGFwcCwgJ3ZpZGVvLWxpc3QnKTtcbiAgICBleHBlY3QodmlkZW9MaXN0KS50by5leGlzdDtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB1cGRhdGUgdGhlIHZpZGVvIHBsYXllciB3aGVuIGEgdmlkZW8gZW50cnlcXCdzIHRpdGxlIGlzIGNsaWNrZWQnLCBmdW5jdGlvbigpIHtcbiAgICAvLyBUaGlzIHRlc3Qgd2lsbCBvbmx5IHdvcmtzIG9uY2UgYEFwcGAgaXMgcmVmYWN0b3JlZCBpbnRvIGEgc3RhdGVmdWwgY2xhc3MgY29tcG9uZW50XG4gICAgLy8gYmVjYXVzZSBgcmVuZGVySW50b0RvY3VtZW50YCBkb2VzIG5vdCB3b3JrIHdpdGggc3RhdGVsZXNzIGNsYXNzIGNvbXBvbmVudHNcbiAgICBleHBlY3QoUmVhY3QuQ29tcG9uZW50LmlzUHJvdG90eXBlT2YoQXBwKSkudG8uYmUudHJ1ZTtcblxuICAgIHZhciB2aWRlb0VudHJ5VGl0bGVFbGVtZW50cyA9IHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3MoYXBwLCAndmlkZW8tbGlzdC1lbnRyeS10aXRsZScpO1xuXG4gICAgdmlkZW9FbnRyeVRpdGxlRWxlbWVudHMuZm9yRWFjaCgodmlkZW9FbnRyeVRpdGxlKSA9PiB7XG4gICAgICBTaW11bGF0ZS5jbGljayh2aWRlb0VudHJ5VGl0bGUpO1xuICAgICAgdmFyIHBsYXllciA9IGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyhhcHAsICd2aWRlby1wbGF5ZXInKTtcbiAgICAgIHZhciBwbGF5ZXJUaXRsZSA9IHBsYXllci5xdWVyeVNlbGVjdG9yKCcudmlkZW8tcGxheWVyLWRldGFpbHMgaDMnKTtcblxuICAgICAgLy8gVGhpcyB0ZXN0IGFzc3VtZXMgdGhhdCBpZiB5b3UgY2FuIHN1Y2Nlc3NmdWxseSB1cGRhdGUgdGhlIHZpZGVvIHBsYXllcidzIHRpdGxlLFxuICAgICAgLy8geW91IGNhbiBhbHNvIHVwZGF0ZSB0aGUgdmlkZW8gYW5kIGRlc2NyaXB0aW9uXG4gICAgICBleHBlY3QocGxheWVyVGl0bGUuaW5uZXJIVE1MKS50by5lcXVhbCh2aWRlb0VudHJ5VGl0bGUuaW5uZXJIVE1MKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgeGRlc2NyaWJlKCd3aGVuIHJlbmRlcmluZyBsaXZlIGRhdGEgZnJvbSBZb3VUdWJlJywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlYXJjaFlvdVR1YmVTdHViO1xuXG4gICAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHNlYXJjaFlvdVR1YmVTdHViID0gc2lub24uc3R1YigpO1xuICAgICAgc2VhcmNoWW91VHViZVN0dWIueWllbGRzKHdpbmRvdy5mYWtlVmlkZW9EYXRhKTtcbiAgICAgIGFwcCA9IHJlbmRlckludG9Eb2N1bWVudChcbiAgICAgICAgPEFwcCBzZWFyY2hZb3VUdWJlPXtzZWFyY2hZb3VUdWJlU3R1Yn0gLz5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGNhbGwgYHNlYXJjaFlvdVR1YmVgIHdoZW4gYXBwIGlzIGluaXRpYWxpemVkJywgZnVuY3Rpb24oKSB7XG4gICAgICBleHBlY3Qoc2VhcmNoWW91VHViZVN0dWIuY2FsbGVkKS50by5iZS50cnVlO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsb2FkIGxpdmUgZGF0YSB3aGVuIGFwcCBpcyBpbml0aWFsaXplZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgZXhwZWN0KHNlYXJjaFlvdVR1YmVTdHViLmNhbGxlZCkudG8uYmUudHJ1ZTtcblxuICAgICAgdmFyIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzID0gc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyhhcHAsICd2aWRlby1saXN0LWVudHJ5LXRpdGxlJyk7XG5cbiAgICAgIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzLmZvckVhY2goKHZpZGVvRW50cnlUaXRsZSwgaSkgPT5cbiAgICAgICAgZXhwZWN0KHZpZGVvRW50cnlUaXRsZS5pbm5lckhUTUwpLnRvLmVxdWFsKGZha2VWaWRlb0RhdGFbaV0uc25pcHBldC50aXRsZSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgfSk7XG59KTtcbiJdfQ==
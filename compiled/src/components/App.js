import exampleVideoData from '../data/exampleVideoData.js';
import searchYouTube from '../lib/searchYouTube.js';
import VideoList from './VideoList.js';
import VideoPlayer from './VideoPlayer.js';
import YOUTUBE_API_KEY from '../config/youtube.js';
import Search from './Search.js';

class App extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      currentVideo: {
        kind: '',
        etag: '',
        id: {
          kind: '',
          videoId: ''
        },
        snippet: {
          publishedAt: '',
          channelId: '',
          title: '',
          description: '',
          thumbnails: {
            default: {
              url: '',
              width: 320,
              height: 180
            },
            medium: {
              url: '',
              width: 320,
              height: 180
            },
            high: {
              url: '',
              width: 480,
              height: 360
            }
          },
          channelTitle: '',
          liveBroadcastContent: ''
        }
      },
      videoList: []
    };
  }

  componentDidMount() {

    var cb = function (videoArray) {
      this.setState({
        currentVideo: videoArray[0],
        videoList: videoArray
      });
    };
    searchYouTube({ query: 'cats', max: 5, key: YOUTUBE_API_KEY }, cb.bind(this));
  }

  setCurrentVideo(event) {
    // console.log(event.target.id);
    // console.log(this);
    for (let i = 0; i < this.state.videoList.length; i++) {
      if (this.state.videoList[i].id.videoId === event.target.id) {
        var indexOfClick = i;
        break;
      }
    }
    this.setState({
      currentVideo: this.state.videoList[indexOfClick]
    });
  }

  searchNewVideo(value) {
    console.log('In App: ', value);
    var cb = function (videoArray) {
      this.setState({
        currentVideo: videoArray[0],
        videoList: videoArray
      });
    };
    searchYouTube({ query: value, max: 5, key: YOUTUBE_API_KEY }, cb.bind(this));
  }

  render() {
    return React.createElement(
      'div',
      null,
      React.createElement(
        'nav',
        { className: 'navbar' },
        React.createElement(
          'div',
          { className: 'col-md-6 offset-md-3' },
          React.createElement(Search, { state: this.state, searchNewVideo: this.searchNewVideo.bind(this) })
        )
      ),
      React.createElement(
        'div',
        { className: 'row' },
        React.createElement(
          'div',
          { id: 'vidplayer', className: 'col-md-7' },
          React.createElement(VideoPlayer, { state: this.state, video: this.state.currentVideo })
        ),
        React.createElement(
          'div',
          { className: 'col-md-5' },
          React.createElement(VideoList, { state: this.state, videos: this.state.videoList, setCurrentVideo: this.setCurrentVideo.bind(this) })
        )
      )
    );
  }
}

// In the ES6 spec, files are "modules" and do not share a top-level scope
// `var` declarations will only exist globally where explicitly defined
export default App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,